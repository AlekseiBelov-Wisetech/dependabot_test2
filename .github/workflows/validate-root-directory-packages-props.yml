name: Validate Root Directory.Packages.props

on:
  pull_request:
    paths:
      - 'Directory.Packages.props'

  workflow_dispatch:
    inputs:
      skippedFolders:
        description: 'Comma-separated list of top-level folders to skip (e.g., Common,Shared)'
        required: false
        default: 'Common'

jobs:
  suggest-package-demotion:
    runs-on: windows-latest

    env:
      DEFAULT_SKIPPED_FOLDERS: 'Common'  # Used in pull_request if no manual input

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Analyze root-level packages across project folders
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          Write-Host "üîç Analyzing root Directory.Packages.props..."

          # Determine skipped folders (from input or env)
          $inputSkipped = "${{ github.event.inputs.skippedFolders }}"
          if ([string]::IsNullOrWhiteSpace($inputSkipped)) {
              $inputSkipped = "$env:DEFAULT_SKIPPED_FOLDERS"
          }

          $skippedFolders = $inputSkipped -split ',' | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne '' }
          Write-Host "üö´ Skipping packages used in folders: $($skippedFolders -join ', ')"

          # Load root-level packages
          $rootPath = Join-Path $PWD "Directory.Packages.props"
          if (-not (Test-Path $rootPath)) {
            Write-Error "‚ùå Root Directory.Packages.props not found!"
            exit 1
          }

          [xml]$rootXml = Get-Content $rootPath
          $rootPackages = $rootXml.Project.ItemGroup.PackageVersion | ForEach-Object { $_.Include }

          if (-not $rootPackages) {
            Write-Host "‚úÖ No packages defined in root. Nothing to check."
            exit 0
          }

          Write-Host "üì¶ Packages in root: $($rootPackages -join ', ')"

          # Initialize usage tracking
          $usageMap = @{}
          $usedInSkippedFolders = @{}

          foreach ($pkg in $rootPackages) {
              $usageMap[$pkg] = New-Object System.Collections.Generic.HashSet[string]
              $usedInSkippedFolders[$pkg] = $false
          }

          # Get all .csproj files
          $csprojFiles = Get-ChildItem -Recurse -Filter *.csproj

          foreach ($file in $csprojFiles) {
              $relativePath = $file.FullName.Substring($PWD.Path.Length + 1)
              $parts = $relativePath -split '[\\/]'  # Normalize path for Windows/Linux

              if ($parts.Length -lt 2) {
                  continue  # Skip files not inside a folder
              }

              $topFolder = $parts[0]

              [xml]$csprojXml = Get-Content $file.FullName
              $packageRefs = $csprojXml.Project.ItemGroup.PackageReference | ForEach-Object { $_.Include }

              foreach ($pkg in $rootPackages) {
                  if ($packageRefs -contains $pkg) {
                      if ($skippedFolders -contains $topFolder) {
                          $usedInSkippedFolders[$pkg] = $true
                      } else {
                          $null = $usageMap[$pkg].Add($topFolder)
                      }
                  }
              }
          }

          # Find root packages that are used in <=2 project folders (excluding skipped ones)
          $recommendations = @{}

          foreach ($pkg in $rootPackages) {
              if ($usedInSkippedFolders[$pkg]) {
                  Write-Host "üìÅ Skipping '$pkg' ‚Äî used in skipped folder(s)."
                  continue
              }

              $folders = $usageMap[$pkg]
              $folderCount = $folders.Count

              if ($folderCount -le 2) {
                  $recommendations[$pkg] = $folders
              }
          }

          # Output results
          if ($recommendations.Count -eq 0) {
              Write-Host "`n‚úÖ All root packages are widely used or used in skipped folders. No recommendations."
          } else {
              Write-Host "`nüîî The following packages are defined in the root Directory.Packages.props but are only used in 1 or 2 top-level project folders:"
              foreach ($pkg in $recommendations.Keys) {
                  $folders = $recommendations[$pkg]
                  Write-Host "`nüîπ Package: $pkg"
                  foreach ($folder in $folders) {
                      Write-Host "   - Used in folder: $folder"
                  }
                  Write-Host "   üëâ Consider moving '$pkg' to that project's Directory.Packages.props file instead."
              }
          
              Write-Error "`n‚ùå Action failed: One or more packages should be moved out of the root Directory.Packages.props file."
              exit 1
          }
