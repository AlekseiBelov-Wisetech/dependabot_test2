name: Validate Root Directory.Packages.props

on:
  pull_request:
    paths:
      - 'Directory.Packages.props'

  workflow_dispatch:
    inputs:
      usageThreshold:
        description: 'Maximum number of folders a package can be used in to trigger a recommendation'
        required: false
        default: '2'

jobs:
  validate-root-package-usage:
    runs-on: windows-latest

    env:
      DEFAULT_USAGE_THRESHOLD: '2'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Analyze root-level packages across project folders
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          $usageThreshold = "${{ github.event.inputs.usageThreshold }}"
          if ([string]::IsNullOrWhiteSpace($usageThreshold)) {
              $usageThreshold = "$env:DEFAULT_USAGE_THRESHOLD"
          }

          Write-Host "üîç Analyzing root Directory.Packages.props..."
          Write-Host "üîß UsageThreshold for root packages: $usageThreshold"

          # Load root Directory.Packages.props
          $rootPath = Join-Path $PWD "Directory.Packages.props"
          if (-not (Test-Path $rootPath)) {
              Write-Error "‚ùå Root Directory.Packages.props not found!"
              exit 1
          }

          [xml]$rootXml = Get-Content $rootPath
          $rootPackages = $rootXml.Project.ItemGroup.PackageVersion | ForEach-Object { $_.Include }

          if (-not $rootPackages) {
              Write-Host "‚úÖ No packages defined in root. Nothing to check."
              exit 0
          }

          # Map each root package to a set of project folders
          $usageMap = @{}
          foreach ($pkg in $rootPackages) {
              $usageMap[$pkg] = New-Object System.Collections.Generic.HashSet[string]
          }

          # Get all Build.xml files to identify project folders
          $buildXmlFiles = Get-ChildItem -Recurse -Filter Build.xml

          if ($buildXmlFiles.Count -eq 0) {
              Write-Error "‚ùå No Build.xml files found in the repo. Cannot determine project folders."
              exit 1
          }

          $projectFolders = @{}
          foreach ($buildFile in $buildXmlFiles) {
              $projectFolder = Split-Path $buildFile.DirectoryName
              $projectFolderName = Split-Path $projectFolder -Leaf
              $projectFolders[$projectFolder] = $projectFolderName
          }

          # Scan .csproj files
          $csprojFiles = Get-ChildItem -Recurse -Filter *.csproj

          foreach ($file in $csprojFiles) {
              $csprojDir = Split-Path $file.Directory.FullName

              # Find the closest project folder this .csproj belongs to
              $matchedFolder = $null
              foreach ($folder in $projectFolders.Keys) {
                  if ($csprojDir -like "$folder*") {
                      $matchedFolder = $projectFolders[$folder]
                      break
                  }
              }

              if (-not $matchedFolder) {
                  continue  # Skip .csproj files not under any known project folder
              }

              [xml]$csprojXml = Get-Content $file.FullName
              $packageRefs = $csprojXml.Project.ItemGroup.PackageReference | ForEach-Object { $_.Include }

              foreach ($pkg in $rootPackages) {
                  if ($packageRefs -contains $pkg) {
                      $null = $usageMap[$pkg].Add($matchedFolder)
                  }
              }
          }

          # Find root packages used in <= usageThreshold project folders
          $recommendations = @{}

          foreach ($pkg in $rootPackages) {
              $folders = $usageMap[$pkg]
              $folderCount = $folders.Count

              if ($folderCount -gt 0 -and $folderCount -le [int]$usageThreshold) {
                  $recommendations[$pkg] = $folders
              }
          }

          # Output recommendations
          if ($recommendations.Count -eq 0) {
              Write-Host "`n‚úÖ All root packages are widely used. No recommendations."
          } else {
              Write-Host "`nüîî The following packages are defined in the root Directory.Packages.props but are only used in $usageThreshold or fewer project folders:"
              foreach ($pkg in $recommendations.Keys) {
                  $folders = $recommendations[$pkg]
                  Write-Host "`nüîπ Package: $pkg"
                  foreach ($folder in $folders) {
                      Write-Host "   - Used in project: $folder"
                  }
                  Write-Host "   üëâ Consider moving '$pkg' to that project's Directory.Packages.props file instead."
              }

              Write-Error "`n‚ùå Action failed: One or more packages should be moved out of the root Directory.Packages.props file."
              exit 1
          }