name: Validate Unused NuGet Packages

on:
  workflow_dispatch:  # Manual trigger

jobs:
  validate-unused-packages:
    name: Detect Unused Packages in Directory.Packages.props
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Scan for unused packages
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          Write-Host "üîç Scanning for unused NuGet packages..."

          $rootDir = "${{ github.workspace }}"
          $propsFiles = Get-ChildItem -Path $rootDir -Recurse -Filter "Directory.Packages.props"
          $allProjects = Get-ChildItem -Path $rootDir -Recurse -Include *.csproj, *.fsproj, *.vbproj

          $hasUnused = $false

          foreach ($propsFile in $propsFiles) {
              Write-Host "`nüìÇ Checking: $($propsFile.FullName)"

              [xml]$xml = Get-Content $propsFile.FullName
              $declaredPackages = @()

              if ($xml.Project.ItemGroup.PackageVersion) {
                  $declaredPackages = $xml.Project.ItemGroup.PackageVersion | ForEach-Object {
                      $_.Include
                  }
              }

              if ($declaredPackages.Count -eq 0) {
                  Write-Host "  ‚ÑπÔ∏è  No PackageVersion entries found."
                  continue
              }

              $baseDir = Split-Path $propsFile.FullName -Parent
              $projectsInScope = $allProjects | Where-Object {
                  $_.FullName.StartsWith($baseDir)
              }

              $usedPackages = @{}
              foreach ($proj in $projectsInScope) {
                  try {
                      [xml]$projXml = Get-Content $proj.FullName
                      $projXml.Project.ItemGroup.PackageReference | ForEach-Object {
                          if ($_.Include) {
                              $usedPackages[$_.Include] = $true
                          }
                      }
                  } catch {
                      Write-Host "  ‚ö†Ô∏è Skipping unreadable project: $($proj.FullName)"
                  }
              }

              $unusedPackages = $declaredPackages | Where-Object { -not $usedPackages.ContainsKey($_) }

              if ($unusedPackages.Count -eq 0) {
                  Write-Host "  ‚úÖ All packages are used."
              } else {
                  Write-Host "  ‚ùå Unused packages detected:"
                  $unusedPackages | ForEach-Object { Write-Host "    - $_" }
                  $hasUnused = $true
              }
          }

          if ($hasUnused) {
              throw "‚ùå One or more unused packages found."
          } else {
              Write-Host "`n‚úÖ No unused packages found in any Directory.Packages.props file."
          }